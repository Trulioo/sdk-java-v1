/*
 * OnlineID.NormalizedAPI
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.trulioo.normalizedapi.api;

import com.trulioo.normalizedapi.ApiException;
import com.trulioo.normalizedapi.model.CountrySubdivision;
import com.trulioo.normalizedapi.model.DataFields;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ConfigurationApi
 */
@Ignore
public class ConfigurationApiTest {

    private final ConfigurationApi api = new ConfigurationApi();

    
    /**
     * This method retrieves the consents required for data sources currently configured in your account configuration.   The response for this method contains a collection of strings that Verify method&#39;s ConsentForDataSources field expects to perform a verification using those data sources.   A failure to provide an element from the string collection will lead to a &lt;a class&#x3D;\&quot;link-to-api\&quot; href&#x3D;\&quot;#errors\&quot;&gt;1005&lt;/a&gt; service error.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getConsentsTest() throws ApiException {
        String countryCode = null;
        String configurationName = null;
        List<String> response = api.getConsents(countryCode, configurationName);

        // TODO: test validations
    }
    
    /**
     * This method retrieves all the countries that are available to perform a verification.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCountryCodesTest() throws ApiException {
        String configurationName = null;
        List<String> response = api.getCountryCodes(configurationName);

        // TODO: test validations
    }
    
    /**
     * Gets the provinces states or other subdivisions for a country, mostly matches ISO 3166-2
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCountrySubdivisionsTest() throws ApiException {
        String countryCode = null;
        List<CountrySubdivision> response = api.getCountrySubdivisions(countryCode);

        // TODO: test validations
    }
    
    /**
     * Gets the document types available for a country.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDocumentTypesTest() throws ApiException {
        String countryCode = null;
        Map<String, List<String>> response = api.getDocumentTypes(countryCode);

        // TODO: test validations
    }
    
    /**
     * Generates json schema for the API, the schema is dynamic based on the country and configuration you are using.  http://json-schema.org/documentation.html
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFieldsTest() throws ApiException {
        String countryCode = null;
        String configurationName = null;
        Object response = api.getFields(countryCode, configurationName);

        // TODO: test validations
    }
    
    /**
     * Gets the test entities configured for your product and country.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTestEntitiesTest() throws ApiException {
        String configurationName = null;
        String countryCode = null;
        List<DataFields> response = api.getTestEntities(configurationName, countryCode);

        // TODO: test validations
    }
    
}
